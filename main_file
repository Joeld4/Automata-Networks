#include <stdio.h>
#include <stdlib.h>


    int m, n1, n2, n3, l1, l2, l3, p;

    int *tab;
    int **b;
    int v[m][6];

int main()
{

    return 0;
}

//**********METHODE POUR LA MATRICE B*****************

void b_matrix(int m, int *tab){

    //Instantiation de la matrice B
    int i,j;
    m = (sizeof(tab) / sizeof(int));
    b = (int**)malloc(m * sizeof(int));
    for(i = 0; i < m; i++){
        tab[i] = (int*)calloc(m, sizeof(int));
        }

    //Remplissage de la matrice B
    b[1][2] = 1;    b[n1+1][n1+2] = 1;  b[n1+n2+1][n1+n2+2] = 1;
    b[1][n1] = 1;   b[n1+1][n1+n2] = 1; b[n1+n2+1][m-1] = 1;
    b[n1][1] = 1;   b[n1+n2][n1+1] = 1; b[m-1][n1+n2+1] = 1;
    b[n1][n1-1]=1;  b[n1+n2][n1+n2-1]=1;b[m-1][m-2] = 1;

    for(i = 0; i < m; i++)
    {
        for(j = 0; j < m; j++)
        {
            if(i == 0)
            {
                if((j==1) || (j==n1+1) || (j==n1+n2+1) || (j==l1+1) || (j==n1+l2+1) || (j==n1+n2+l3+1))
                {
                    b[i][j] = 1;
                    b[j][i] = 1;
                }
                else if(((i =! 1) || (i =! n1+1) || (i =! n1+n2+1) || (i =! n1) || (i =! n1+n2) || (i =! m-1)) && (j > 1))
                {
                    b[i][j-1] = 1;
                    b[i][j+1] = 1;
                    b[j-1][i] = 1;
                    b[j+1][i] = 1;
                }
            }
        }
    }

}


//*************METHODE POUR LA MATRICE V****************

void v_matrix(int **b)
{

    //Instatiation de la matrice V
    int i, j, k;
    for(i = 0; i < m-1; i++)
    {
        for(j = 0; j < 6; j++)
        {
            v[i][j] = -1;
        }
    }


    //Remplissage de la matrice V
    for(i = 0; i < m-1; i++)
    {
        k = 0;
        for(j = 0; j < 6; j++)
        {
            if(b[i][j] == 1)
            {
                v[i][k] = j;
                k++;
            }
        }
    }
}













